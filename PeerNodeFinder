

/**
 * @author Saravanakumar Alavandar
 */
public class PeerNodeFinder {


    private Node rootNode;

    void add(String name, String parent, String childOf, String siblingOf) {


        Node node = new Node(name, parent, childOf, siblingOf);

        // add root node
        if (this.rootNode == null) {
            this.rootNode = node;
            return;
        }

        // add subsequent node
        addNode(rootNode, node);

    }

    /**
     * To add node
     *
     * @param node
     * @param tobeAdded
     */
    void addNode(Node node, Node tobeAdded) {


        if (node.getName().equals(tobeAdded.getName())) {
            return;
        }

        if (node.getName().equals(tobeAdded.getParent())) {
            tobeAdded.setParentNode(node);
        }

        if (node.getName().equals(tobeAdded.getChildOf())) {
            node.setChildNode(tobeAdded);

        }

        if (node.getName().equals(tobeAdded.getSiblingOf())) {
            node.setSiblingNode(tobeAdded);
        }

        if (node.getChildNode() != null) {
            addNode(node.getChildNode(), tobeAdded);
        }

        if (node.getSiblingNode() != null) {
            addNode(node.getSiblingNode(), tobeAdded);
        }

    }

    /**
     * @param name
     * @return String peer node name
     */
    public String findPeer(String name) {

        /**
         * Initially go downwards and find node and find the peer node from adjacent level
         */
        Node node = findNode(rootNode, name, 1, 0, Direction.DOWN);

        if (node == null) {
            System.out.println("Node name " + name + " not found.");
            return null;

        }
        return node.getName();

    }

    private Node findNode(Node node, String name, int level, int peerLevel, Direction direction) {


        if (level == 1 && node.getName().equals(name)) {
            System.out.println(name + " is the root node.");
            return null;
        }

        // if both at same level, return the found node
        if (level == peerLevel) {
            return node;
        }

        // find the input name node
        if (node.getName().equals(name)) {
            System.out.println("node " + name + " found at position " + level);

            peerLevel = level;

            if (node.getSiblingNode() != null) {
                return node.getSiblingNode();
            }

            direction = Direction.UP;

        }


        if (direction == Direction.DOWN || direction == Direction.LEVEL) {


            if (node.getChildNode() != null) {
                level++;
                return findNode(node.getChildNode(), name, level, peerLevel, Direction.DOWN);
            }

            if (node.getSiblingNode() != null) {
                return findNode(node.getSiblingNode(), name, level, peerLevel, Direction.LEVEL);
            }

            direction = Direction.UP;

        }

        if (direction == Direction.UP) {


            if (node.getSiblingNode() != null) {
                return findNode(node.getSiblingNode(), name, level, peerLevel, Direction.LEVEL);
            }

            if (node.getParentNode() != null) {
                level--;
                return findNode(node.getParentNode(), name, level, peerLevel, Direction.UP);
            }

        }

        return null;


    }

    public static void main(String args[]) {

        PeerNodeFinder test = new PeerNodeFinder();
        test.add("A", "", "", "");
        test.add("B", "A", "A", "");
        test.add("C", "B", "B", "");
        test.add("F", "A", "", "B");
        test.add("J", "A", "", "F");
        test.add("K", "A", "", "J");
        test.add("G", "F", "F", "");
        test.add("H", "F", "", "G");
        test.add("I", "H", "H", "");

        test.add("D", "C", "C", "");
        test.add("E", "D", "D", "");
        test.add("L", "K", "K", "");
        test.add("M", "L", "L", "");
        test.add("N", "M", "M", "");


        String peerNodeName = test.findPeer("C");

        if (peerNodeName == null) {
            System.out.println("No peer found");
            return;
        }

        System.out.println("Peer node: " + peerNodeName);


    }


    /**
     * Class to hold node values.
     */
    static
    class Node {
        private String name;

        private String parent;

        private String childOf;

        private String siblingOf;

        private Node parentNode;

        private Node childNode;

        private Node siblingNode;

        public Node(String name, String parent, String childOf, String siblingOf) {

            this.name = name;
            this.siblingOf = siblingOf;
            this.childOf = childOf;
            this.parent = parent;
        }

        public String getName() {
            return name;
        }


        public String getParent() {
            return parent;
        }


        public String getChildOf() {
            return childOf;
        }


        public String getSiblingOf() {
            return siblingOf;
        }


        public Node getParentNode() {
            return parentNode;
        }

        public void setParentNode(Node parentNode) {
            this.parentNode = parentNode;
        }

        public Node getChildNode() {
            return childNode;
        }

        public void setChildNode(Node childNode) {
            this.childNode = childNode;
        }

        public Node getSiblingNode() {
            return siblingNode;
        }

        public void setSiblingNode(Node siblingNode) {
            this.siblingNode = siblingNode;
        }

        @Override
        public String toString() {
            return "Node{" +
                    "name='" + name + '\'' +
                    ", parent='" + parent + '\'' +
                    ", childOf='" + childOf + '\'' +
                    ", siblingOf='" + siblingOf + '\'' +
                    '}';
        }
    }

    /**
     * Enum to specify the direction to move.
     */
    public enum Direction {

        UP,
        DOWN,
        LEVEL
    }
}


